---- DROP PROCEDURE SP_FETCH_IFRS_MASTER_LIMIT;

CREATE OR REPLACE PROCEDURE SP_FETCH_IFRS_MASTER_LIMIT(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000',
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_CURRDATE DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLENAME VARCHAR(100);
    V_TABLENAME_MON VARCHAR(100);
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);

    ---- VARIABLE PROCESS
    V_PRD_TYPE_VAL_CS VARCHAR(100);
    
    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLENAME := 'TMP_IMA_' || P_RUNID || '';
        V_TABLENAME_MON := 'TMP_IMAM_' || P_RUNID || '';
        V_TABLEINSERT1 := 'IFRS_MASTER_LIMIT_' || P_RUNID || '';
        V_TABLEINSERT2 := 'IFRS_MASTER_EXCHANGE_RATE_' || P_RUNID || '';
    ELSE 
        V_TABLENAME := 'TMP_IMA';
        V_TABLENAME_MON := 'TMP_IMAM';
        V_TABLEINSERT1 := 'IFRS_MASTER_LIMIT';
        V_TABLEINSERT2 := 'IFRS_MASTER_EXCHANGE_RATE';
    END IF;
    
    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE, PREVDATE INTO V_CURRDATE, V_PREVDATE
        FROM
            DBLINK('ifrs9_stg', 'SELECT CURRDATE, PREVDATE FROM STG_PRC_DATE') AS STG_PRC_DATE(CURRDATE DATE, PREVDATE DATE);
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
        V_PREVDATE := V_CURRDATE - INTERVAL '1 DAY';
    END IF;

    IF V_CURRDATE IS NULL THEN 
        SELECT CURRDATE INTO V_CURRDATE 
        FROM IFRS_PRC_DATE;
    END IF;

    IF V_PREVDATE IS NULL THEN 
        SELECT PREVDATE INTO V_PREVDATE 
        FROM IFRS_PRC_DATE; 
    END IF;

    SELECT VALUE1 INTO V_PRD_TYPE_VAL_CS
    FROM TBLM_COMMONCODEDETAIL 
    WHERE COMMONCODE = 'PRD_TYPE_CS';
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLENAME || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLENAME || ' AS SELECT * FROM IFRS_MASTER_ACCOUNT WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLENAME_MON || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLENAME_MON || ' AS SELECT * FROM IFRS_MASTER_ACCOUNT_MONTHLY WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);
        
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT1 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT1 || ' AS SELECT * FROM IFRS_MASTER_LIMIT WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- ====== PRE SIMULATION TABLE ======

    -------- ====== BODY ======
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT1 || ' 
        WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT1 || ' 
        (
            DOWNLOAD_DATE 
            ,MASTERID 
            ,COMMITMENT_ID 
            ,BRANCH_CODE 
            ,PRODUCT_CODE 
            ,ACCOUNT_NUMBER 
            ,CUSTOMER_NUMBER 
            ,CURRENCY 
            ,LIMIT_AMT 
            ,USED_AMT 
            ,UNUSED_AMT 
            ,START_DATE 
            ,DUE_DATE 
            ,REVOLVING_FLAG 
            ,COMMITMENT_FLAG 
            ,SOURCE_SYSTEM 
            ,CUSTOMER_NAME 
            ,CUSTOMER_TYPE 
            ,SANDI_BANK 
            ,SEGMENT_FLAG 
        ) SELECT 
            CL.BUSS_DATE 
            ,CASE WHEN CL.CIF IS NULL OR DEAL_REF IS NULL OR DEAL_TYPE IS NULL THEN NULL ELSE CONCAT(CL.CIF, ''_'', DEAL_REF, ''_'', DEAL_TYPE) END 
            ,COMMITMENT_REFERENCE 
            ,COALESCE(CL.BRANCH,CL.BRANCH_MNEMONIC) 
            ,CASE WHEN COALESCE(DEAL_TYPE, '''') <> '''' THEN DEAL_TYPE ELSE LEFT(COMMITMENT_TITLE,3) END 
            ,DEAL_REF 
            ,CL.CIF 
            ,COALESCE(CCY, ''IDR'') 
            ,COALESCE(COMMITMENT_AMOUNT, ORIGINAL_COMMITMENT_AMOUNT) 
            ,COALESCE(COMMITMENT_AMOUNT, ORIGINAL_COMMITMENT_AMOUNT) - UNUSED_COMMITMENT_AMOUNT 
            ,UNUSED_COMMITMENT_AMOUNT 
            ,AGREEMENT_DATE 
            ,EXPIRY_DATE 
            ,CASE WHEN REVOLVING_STATUS = ''N'' THEN 0 ELSE 1 END 
            ,1 
            ,CL.SOURCE_SYSTEM 
            ,CIF.CUST_FULL_NAME 
            ,CIF.CUSTOMER_TYPE 
            ,CASE WHEN LTRIM(RTRIM(CIF.LBU_GOL_NASABAH)) = '''' THEN NULL ELSE CIF.LBU_GOL_NASABAH END 
            ,''N/A'' 
        FROM DBLINK(''ifrs9_stg'', ''SELECT * FROM STG_COMMITMENT_LOAN'') 
        AS CL (
            BUSS_DATE TIMESTAMP 
            ,COMMITMENT_REFERENCE VARCHAR(30) 
            ,BRANCH VARCHAR(4) 
            ,DEAL_TYPE VARCHAR(3) 
            ,DEAL_REF VARCHAR(13) 
            ,BRANCH_MNEMONIC VARCHAR(4) 
            ,ORIGINAL_COMMITMENT_AMOUNT NUMERIC(20,4) 
            ,UNUSED_COMMITMENT_AMOUNT NUMERIC(20,4) 
            ,AGREEMENT_DATE TIMESTAMP 
            ,FIRST_DRAWDOWN_DATE TIMESTAMP 
            ,FINAL_REPAYMENT_DATE TIMESTAMP 
            ,COMMITMENT_TITLE VARCHAR(35) 
            ,COMMITMENT_DETAILS_LINE_1 VARCHAR(35) 
            ,COMMITMENT_DETAILS_LINE_2 VARCHAR(35) 
            ,COMMITMENT_DETAILS_LINE_3 VARCHAR(35) 
            ,COMMITMENT_DETAILS_LINE_4 VARCHAR(35) 
            ,COMMITMENT_AMOUNT NUMERIC(20,4) 
            ,EXPIRY_DATE TIMESTAMP 
            ,CCY VARCHAR(3) 
            ,CIF VARCHAR(6) 
            ,REVOLVING_STATUS VARCHAR(1) 
            ,SOURCE_SYSTEM VARCHAR(6) 
        ) 
        LEFT JOIN (
            SELECT PRD_CODE 
            FROM IFRS_MASTER_PRODUCT_PARAM 
            WHERE IS_DELETE = 0
        ) PRODUCT 
        ON CL.DEAL_TYPE = PRODUCT.PRD_CODE 
        LEFT JOIN DBLINK(''ifrs9_stg'', ''SELECT * FROM STG_CIF'') AS CIF (
            BUSS_DATE TIMESTAMP
            ,CIF VARCHAR(6)
            ,CUST_SHORT_NAME VARCHAR(30)
            ,CUST_FULL_NAME VARCHAR(50)
            ,BRANCH VARCHAR(4)
            ,HADDRESS1 VARCHAR(40)
            ,HADDRESS2 VARCHAR(40)
            ,HADDRESS3 VARCHAR(40)
            ,HPOST_CODE VARCHAR(6)
            ,HADDRESS4 VARCHAR(40)
            ,HADDRESS5 VARCHAR(40)
            ,MOBILE_PHONE VARCHAR(14)
            ,HOME_PHONE VARCHAR(14)
            ,FAX VARCHAR(14)
            ,GENDER VARCHAR(1)
            ,PLACE_OF_BIRTH VARCHAR(35)
            ,BIRTH_DATE TIMESTAMP
            ,ID_TYPE VARCHAR(1)
            ,ID_NUMBER VARCHAR(40)
            ,PASSPORT_NO VARCHAR(20)
            ,CITIZENSHIP VARCHAR(4)
            ,PROF_ID VARCHAR(40)
            ,MARITAL_STATUS VARCHAR(1)
            ,RELIGION VARCHAR(1)
            ,RO_CODE VARCHAR(5)
            ,FOUNDER VARCHAR(10)
            ,LAST_MAINTAINED_DATE TIMESTAMP
            ,LBU_SEKTOR_EKONOMI VARCHAR(4)
            ,NPWP VARCHAR(20)
            ,OPEN_DATE TIMESTAMP
            ,MOTHER_NAME VARCHAR(35)
            ,CURRENT_INCOME VARCHAR(1)
            ,SOURCE_INCOME VARCHAR(1)
            ,PURPOSE VARCHAR(1)
            ,EDUCATION VARCHAR(1)
            ,LBU_GOL_NASABAH VARCHAR(4)
            ,PROFESSION VARCHAR(35)
            ,JABATAN VARCHAR(20)
            ,JENIS_USAHA VARCHAR(35)
            ,CUSTOMER_TYPE VARCHAR(2)
            ,RESIDENCE_COUNTRY VARCHAR(2)
            ,ID_EXPIRED TIMESTAMP
            ,EMAIL VARCHAR(60)
            ,BUSINESS_PHONE VARCHAR(35)
            ,SOURCE_SYSTEM VARCHAR(6)
        ) 
        ON CL.CIF = CIF.CIF 
        AND CASE 
            WHEN CL.SOURCE_SYSTEM = ''CMS'' 
            THEN ''EQ'' 
            ELSE CL.SOURCE_SYSTEM 
        END = CIF.SOURCE_SYSTEM 
        AND CIF.SOURCE_SYSTEM <> ''T24'' 
        WHERE CL.SOURCE_SYSTEM <> ''T24'' 
        AND CL.BUSS_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLENAME || ' 
        WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND DATA_SOURCE = ''LIMIT'' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLENAME || ' 
        (
            DOWNLOAD_DATE 
            ,MASTERID 
            ,MASTER_ACCOUNT_CODE 
            ,DATA_SOURCE 
            ,CUSTOMER_NUMBER 
            ,ACCOUNT_NUMBER 
            ,ACCOUNT_STATUS 
            ,PRODUCT_CODE 
            ,PRODUCT_ENTITY 
            ,BRANCH_CODE 
            ,FACILITY_NUMBER 
            ,CURRENCY 
            ,EXCHANGE_RATE 
            ,INITIAL_OUTSTANDING 
            ,OUTSTANDING 
            ,PLAFOND 
            ,UNUSED_AMOUNT 
            ,LOAN_START_DATE 
            ,LOAN_DUE_DATE 
            ,COMMITTED_FLAG 
            ,REVOLVING_FLAG 
            ,IAS_CLASS 
            ,CREATEDDATE 
            ,RESTRUCTURE_COLLECT_FLAG 
            ,SOURCE_SYSTEM 
            ,CUSTOMER_NAME 
            ,CUSTOMER_TYPE 
            ,SANDI_BANK 
            ,SEGMENT_FLAG 
        ) SELECT 
            DOWNLOAD_DATE 
            ,MASTERID 
            ,MASTER_ACCOUNT_CODE 
            ,DATA_SOURCE 
            ,MAX(CUSTOMER_NUMBER) AS CUSTOMER_NUMBER 
            ,MAX(ACCOUNT_NUMBER) AS ACCOUNT_NUMBER 
            ,MAX(ACCOUNT_STATUS) AS ACCOUNT_STATUS 
            ,MAX(PRODUCT_CODE) AS PRODUCT_CODE 
            ,MAX(PRODUCT_ENTITY) AS PRODUCT_ENTITY 
            ,MAX(BRANCH_CODE) AS BRANCH_CODE 
            ,MAX(FACILITY_NUMBER) AS FACILITY_NUMBER 
            ,MAX(CURRENCY) AS CURRENCY 
            ,MAX(EXCHANGE_RATE) AS EXCHANGE_RATE 
            ,MAX(INITIAL_OUTSTANDING) AS INITIAL_OUTSTANDING 
            ,MAX(OUTSTANDING) AS OUTSTANDING 
            ,MAX(PLAFOND) AS PLAFOND 
            ,MAX(UNUSED_AMOUNT) AS UNUSED_AMOUNT 
            ,MAX(LOAN_START_DATE) AS LOAN_START_DATE 
            ,MAX(LOAN_DUE_DATE) AS LOAN_DUE_DATE 
            ,MAX(CAST(COMMITTED_FLAG AS INT)) AS COMMITTED_FLAG 
            ,MAX(CAST(REVOLVING_FLAG AS INT)) AS REVOLVING_FLAG 
            ,MAX(IAS_CLASS) AS IAS_CLASS 
            ,CURRENT_TIMESTAMP AS CREATEDDATE 
            ,0 AS RESTRUCTURE_COLLECT_FLAG 
            ,MAX(SOURCE_SYSTEM) AS SOURCE_SYSTEM 
            ,MAX(CUSTOMER_NAME)  AS CUSTOMER_NAME 
            ,MAX(CUSTOMER_TYPE) AS CUSTOMER_TYPE 
            ,MAX(SANDI_BANK) AS SANDI_BANK 
            ,SEGMENT_FLAG 
        FROM ( 
            SELECT 
                A.DOWNLOAD_DATE 
                ,CONCAT(A.CUSTOMER_NUMBER, ''_CL_'', A.COMMITMENT_ID, ''_'', A.PRODUCT_CODE) AS MASTERID 
                ,CONCAT(A.CUSTOMER_NUMBER, ''_CL_'', A.COMMITMENT_ID, ''_'', A.PRODUCT_CODE) AS MASTER_ACCOUNT_CODE 
                ,''LIMIT'' AS DATA_SOURCE 
                ,CUSTOMER_NUMBER 
                ,CONCAT(''CL_'', COMMITMENT_ID) AS ACCOUNT_NUMBER 
                ,''A'' AS ACCOUNT_STATUS 
                ,CONCAT(''CL_'', PRODUCT_CODE) AS PRODUCT_CODE 
                ,''C'' AS PRODUCT_ENTITY 
                ,BRANCH_CODE 
                ,COMMITMENT_ID AS FACILITY_NUMBER 
                ,A.CURRENCY 
                ,COALESCE(B.RATE_AMOUNT,1) AS EXCHANGE_RATE 
                ,0 AS INITIAL_OUTSTANDING 
                ,0 AS OUTSTANDING 
                ,A.LIMIT_AMT AS PLAFOND 
                ,A.UNUSED_AMT AS UNUSED_AMOUNT 
                ,START_DATE AS LOAN_START_DATE 
                ,DUE_DATE AS LOAN_DUE_DATE 
                ,A.COMMITMENT_FLAG AS COMMITTED_FLAG 
                ,REVOLVING_FLAG 
                ,''O'' AS IAS_CLASS 
                ,A.SOURCE_SYSTEM 
                ,A.CUSTOMER_NAME 
                ,A.CUSTOMER_TYPE 
                ,A.SANDI_BANK 
                ,A.SEGMENT_FLAG 
            FROM ' || V_TABLEINSERT1 || ' A 
            LEFT JOIN ' || V_TABLEINSERT2 || ' B 
            ON A.CURRENCY = B.CURRENCY 
            AND A.DOWNLOAD_DATE = B.DOWNLOAD_DATE 
            LEFT JOIN (
                SELECT ACCOUNT_NUMBER 
                FROM DBLINK(''ifrs9_stg'', ''SELECT ACCOUNT_NUMBER, DOWNLOAD_DATE FROM IMA_LENDING'') AS IMA_LENDING (ACCOUNT_NUMBER VARCHAR(50), DOWNLOAD_DATE DATE) 
                WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
                GROUP BY ACCOUNT_NUMBER 
            ) C 
            ON A.ACCOUNT_NUMBER = C.ACCOUNT_NUMBER 
            WHERE (A.DUE_DATE >= A.DOWNLOAD_DATE OR C.ACCOUNT_NUMBER IS NOT NULL) 
            AND A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
            AND REVOLVING_FLAG = ''1'' 
            AND A.LIMIT_AMT >= A.UNUSED_AMT 
        ) X 
        GROUP BY 
            DOWNLOAD_DATE 
            ,MASTERID 
            ,MASTER_ACCOUNT_CODE 
            ,DATA_SOURCE 
            ,SEGMENT_FLAG ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLENAME || ' A 
        SET 
            DAY_PAST_DUE = COALESCE(B.DAY_PAST_DUE, 0) 
            ,DPD_FINAL = COALESCE(B.DPD_FINAL, 0) 
            ,BI_COLLECTABILITY = COALESCE(B.BI_COLLECTABILITY, 1) 
            ,RESTRUCTURE_COLLECT_FLAG = 0 
        FROM (
            SELECT DOWNLOAD_DATE, CUSTOMER_NUMBER, MAX(DAY_PAST_DUE) DAY_PAST_DUE, MAX(BI_COLLECTABILITY) BI_COLLECTABILITY, MAX(DPD_FINAL) DPD_FINAL 
            FROM ' || V_TABLENAME || ' 
            WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
            AND CUSTOMER_NUMBER IN ( 
                SELECT CUSTOMER_NUMBER 
                FROM ' || V_TABLEINSERT1 || ' 
                WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
            ) 
            GROUP BY DOWNLOAD_DATE, CUSTOMER_NUMBER 
            ORDER BY DOWNLOAD_DATE, CUSTOMER_NUMBER 
        ) B 
        WHERE A.DOWNLOAD_DATE = B.DOWNLOAD_DATE 
        AND A.CUSTOMER_NUMBER = B.CUSTOMER_NUMBER 
        AND A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND A.DATA_SOURCE = ''LIMIT'' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLENAME_MON || ' A 
        SET 
            MASTERID = CONCAT(A.MASTERID, CASE WHEN COALESCE(B.DEAL_TYPE, '''') <> '''' THEN B.DEAL_TYPE ELSE CASE WHEN COALESCE(B.COMMITMENT_TITLE, '''') <> '''' THEN B.COMMITMENT_TITLE ELSE SUBSTRING(REPLACE(A.ACCOUNT_NUMBER, ''CL_'', ''''), 5, 3) END END) 
            ,PRODUCT_CODE = CONCAT(''CL_'', CASE WHEN COALESCE(B.DEAL_TYPE, '''') <> '''' THEN B.DEAL_TYPE ELSE CASE WHEN COALESCE(B.COMMITMENT_TITLE, '''') <> '''' THEN B.COMMITMENT_TITLE ELSE SUBSTRING(REPLACE(A.ACCOUNT_NUMBER, ''CL_'', ''''), 5, 3) END END) 
        FROM "2019_commitment" B 
        WHERE CONCAT(''CL_'', B.COMMITMENT_REFERENCE) = A.ACCOUNT_NUMBER 
        AND DATA_SOURCE = ''LIMIT'' 
        AND DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND DOWNLOAD_DATE = F_EOMONTH(A.DOWNLOAD_DATE, 0, ''M'', ''NEXT'') 
        AND A.PRODUCT_CODE = ''CL_'' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLENAME || ' A 
        SET 
            MASTERID = CONCAT(A.MASTERID, CASE WHEN COALESCE(B.DEAL_TYPE, '''') <> '''' THEN B.DEAL_TYPE ELSE CASE WHEN COALESCE(B.COMMITMENT_TITLE, '''') <> '''' THEN B.COMMITMENT_TITLE ELSE SUBSTRING(REPLACE(A.ACCOUNT_NUMBER, ''CL_'', ''''), 5, 3) END END) 
            ,PRODUCT_CODE = CONCAT(''CL_'', CASE WHEN COALESCE(B.DEAL_TYPE, '''') <> '''' THEN B.DEAL_TYPE ELSE CASE WHEN COALESCE(B.COMMITMENT_TITLE, '''') <> '''' THEN B.COMMITMENT_TITLE ELSE SUBSTRING(REPLACE(A.ACCOUNT_NUMBER, ''CL_'', ''''), 5, 3) END END) 
        FROM "2019_commitment" B 
        WHERE CONCAT(''CL_'', B.COMMITMENT_REFERENCE) = A.ACCOUNT_NUMBER 
        AND DATA_SOURCE = ''LIMIT'' 
        AND DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND A.PRODUCT_CODE = ''CL_'' '; 
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLENAME || ' 
        SET SEGMENT_FLAG = ''CROSS_SEGMENT_LIMIT'' 
        FROM ' || V_TABLENAME || ' A 
        JOIN (
            SELECT DISTINCT CUSTOMER_NUMBER 
            FROM TBLU_CUSTOMER_GRADING 
            WHERE CAST(DOWNLOAD_DATE AS VARCHAR(10))::DATE <= ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        ) B 
        ON A.CUSTOMER_NUMBER = B.CUSTOMER_NUMBER 
        JOIN (
            SELECT PRD_CODE 
            FROM IFRS_MASTER_PRODUCT_PARAM 
            WHERE PRD_TYPE IN (''' || REPLACE(V_PRD_TYPE_VAL_CS, ',', ''',''') || ''') 
            AND IS_DELETE = 0 
        ) PD 
        ON A.PRODUCT_CODE = PD.PRD_CODE 
        WHERE A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND A.DATA_SOURCE = ''LIMIT'' ';
    EXECUTE (V_STR_QUERY);
    
    RAISE NOTICE 'SP_FETCH_IFRS_MASTER_LIMIT | AFFECTED RECORD : %', V_RETURNROWS2;
    ---------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT1;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_FETCH_IFRS_MASTER_LIMIT';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT1 || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

END;

$$;