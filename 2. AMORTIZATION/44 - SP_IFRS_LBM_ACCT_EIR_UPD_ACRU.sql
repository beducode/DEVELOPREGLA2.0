---- DROP PROCEDURE SP_IFRS_SYNC_PRODUCT_PARAM;

CREATE OR REPLACE PROCEDURE SP_IFRS_SYNC_PRODUCT_PARAM(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000',
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_CURRDATE DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLEINSERT VARCHAR(100);
    V_TMPTABLE VARCHAR(100);
    
    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLEINSERT := 'SP_IFRS_ACCT_EIR_UPD_ACRU_ACF_' || P_RUNID || '';
        V_TABLEINSERT1 := 'TMP_AP_' || P_RUNID || '';
        V_TABLEINSERT2 := 'IFRS_ACCT_SL_ACF_' || P_RUNID || '';
        V_TMPTABLE := 'TMP_MARKETRATE_' || P_RUNID || '';
    ELSE 
        V_TABLEINSERT := 'SP_IFRS_ACCT_EIR_UPD_ACRU_ACF';
        V_TABLEINSERT1 := 'TMP_AP';
        V_TABLEINSERT2 := 'IFRS_ACCT_SL_ACF';
        V_TMPTABLE := 'TMP_MARKETRATE';
    END IF;
    
    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE, PREVDATE INTO V_CURRDATE, V_PREVDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
        V_PREVDATE := V_CURRDATE - INTERVAL '1 DAY';
    END IF;
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT || ' AS SELECT * FROM IFRS_PRODUCT_PARAM WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- ====== PRE SIMULATION TABLE ======

    -------- ====== BODY ======
	
    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'START', V_TABLEINSERT, '');
	

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT1 || ' 
        ( 
            MASTERID
			,FLAG_CF
			,AMOUNT
		) SELECT 
			masterid
			,sum(case when flag_reverse='Y' then -1 * amount else amount end) as amount 
		FROM IFRS_ACCT_SL_ACCRU_PREV A
		WHERE status='ACT'
		GROUP BY masterid, flag_cf';
	EXECUTE (V_STR_QUERY);


	V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || '
		SET 
			N_ACCRU_PREV_COST = A.AMOUNT
		FROM (
			SELECT 
				X.*
				, Y.*
			FROM ' || V_TABLEINSERT1 || ' X
			CROSS JOIN IFRS_PRC_DATE_AMORT Y
		) A
		WHERE
			' || V_TABLEINSERT2 || '.MASTERID = A.MASTERID
			AND ' || V_TABLEINSERT2 || '.DOWNLOAD_DATE = A.DOWNLOAD_DATE	
			AND ' || V_TABLEINSERT2 || 'A.FLAG_CF = 'C'	
	EXECUTE (V_STR_QUERY); 

	V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || ' 
        SET 
			N_ACCRU_PREV_COST = A.AMOUNT
		FROM (
			SELECT 
				X.*
				, Y.*
			FROM ' || V_TABLEINSERT1 || ' X
			CROSS JOIN IFRS_PRC_DATE_AMORT Y
		) A
		WHERE
			' || V_TABLEINSERT2 || '.MASTERID = A.MASTERID
			AND ' || V_TABLEINSERT2 || '.DOWNLOAD_DATE = A.DOWNLOAD_DATE	
			AND ' || V_TABLEINSERT2 || 'A.FLAG_CF = 'F'	
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;
    
    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'END', V_SP_NAME, '');

    RAISE NOTICE 'SP_IFRS_SYNC_PRODUCT_PARAM | AFFECTED RECORD : %', V_RETURNROWS2;
    ---------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_SYNC_PRODUCT_PARAM';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

END;

$$;