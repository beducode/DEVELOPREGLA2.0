---- DROP PROCEDURE SP_IFRS_AMT_INITIAL_UPDATE;

CREATE OR REPLACE PROCEDURE SP_IFRS_AMT_INITIAL_UPDATE(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000',
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_CURRDATE DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLENAME VARCHAR(100);
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    V_TABLEINSERT3 VARCHAR(100);
    
    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLENAME := 'TMP_T1_' || P_RUNID || '';
        V_TABLENAME1 := 'TMP_T2_' || P_RUNID || '';
        V_TABLEINSERT1 := 'IFRS_ACCT_CLOSED_' || P_RUNID || '';
        V_TABLEINSERT2 := 'IFRS_LBM_ACCT_EIR_ACF_' || P_RUNID || '';
        V_TABLEINSERT3 := 'IFRS_LBM_ACCT_EIR_ACCRU_PREV_' || P_RUNID || '';
    ELSE 
        V_TABLENAME := 'TMP_T1';
        V_TABLENAME1 := 'TMP_T2';
        V_TABLEINSERT1 := 'IFRS_ACCT_CLOSED';
        V_TABLEINSERT2 := 'IFRS_LBM_ACCT_EIR_ACF';
        V_TABLEINSERT3 := 'IFRS_LBM_ACCT_EIR_ACCRU_PREV';
    END IF;
    
    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE, PREVDATE INTO V_CURRDATE, V_PREVDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
        V_PREVDATE := V_CURRDATE - INTERVAL '1 DAY';
    END IF;
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT3 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT3 || ' AS SELECT * FROM TBLM_CURRENCY WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- ====== PRE SIMULATION TABLE ======

    -------- ====== BODY ======
    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'START', 'SP_IFRS_LBM_ACCT_EIR_LAST_ACF', '');

	---- TRUNCATE TABLE
	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE ' || V_TABLENAME || ' ';
	EXECUTE (V_STR_QUERY);

	---- INSERT DATA FROM IFRS_MASTER_TRANSACTION
	V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLENAME || ' 
		MASTERID
		SELECT DISTINCT
			MASTERID
		FROM ' || V_TABLEINSERT1 || '
		JOIN ' || V_TABLEINSERT2 || ' ON ' || '.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
		AND B.MASTERID = A.MASTERID
		JOIN ' || V_TABLEINSERT2 || ' C ON A.CURRENCY = C.CCY
		AND C.MASTERID = A.MASTERID
		AND C.PREV_PMT_DATE = C.PMT_DATE
		WHERE A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE';
    EXECUTE (V_STR_QUERY);

		-- GET MAX ID OF ACF
	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE ' || V_TABLENAME || ' ';
	EXECUTE (V_STR_QUERY);

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLENAME || ' 
		SELECT MAX(ID) AS ID
		FROM IFRS_LBM_ACCT_EIR_ACF
		WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
		AND MASTERID IN (
			SELECT MASTERID
			FROM ' || V_TABLENAME || '
			)';
	EXECUTE (V_STR_QUERY);


	---- UPDATE ACCRUED

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT3 || ' 
		SET STATUS = '||  CONVERT(VARCHAR(8), @V_CURRDATE, 112)
		,CREATEDBY = 'EIR_LAST_ACF' '|| ''ACT'' 
		WHERE STATUS = ''ACT''
		AND MASTERID IN (
			SELECT MASTERID
			FROM ' || V_TABLENAME || '
		) ';
	EXECUTE (V_STR_QUERY);

	-- INSERT LAST ACF FOR FULL AMORT

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT2 || ' 
		DOWNLOAD_DATE
		,FACNO
		,CIFNO
		,ACCTNO
		,DATASOURCE
		,ECFDATE
		,MASTERID
		,BRANCH
		,N_UNAMORT_FEE
		,N_AMORT_FEE
		,N_ACCRU_FEE
		,N_ACCRUFULL_FEE
		,N_UNAMORT_COST
		,N_AMORT_COST
		,N_ACCRU_COST
		,N_ACCRUFULL_COST
		,N_ACCRU_PREV_FEE
		,N_ACCRU_PREV_COST
		,DO_AMORT
		,CREATEDDATE
		,CREATEDBY
		SELECT ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
		,FACNO
		,CIFNO
		,ACCTNO
		,DATASOURCE
		,ECFDATE
		,MASTERID
		,BRANCH
		,0 AS N_UNAMORT_FEE
		,N_AMORT_FEE + N_UNAMORT_FEE
		,CASE 
			WHEN DO_AMORT = 'Y'
				THEN N_AMORT_FEE - N_UNAMORT_FEE
			ELSE - N_UNAMORT_FEE + N_ACCRU_FEE
			END AS N_ACCRUFULL_FEE
		,CASE
			WHEN DO_AMORT = 'Y'
				THEN N_AMORT_FEE - N_UNAMORT_FEE
			ELSE - N_UNAMORT_FEE + N_ACCRU_FEE
			END 
		,0 AS N_UNAMORT_COST
		,N_AMORT_COST + N_UNAMORT_COST
		,CASE 
			WHEN DO_AMORT = 'Y'
				THEN N_AMORT_COST - N_UNAMORT_COST
			ELSE - N_UNAMORT_COST + N_ACCRU_COST
			END
		,CASE 
			WHEN DO_AMORT = 'Y'
				THEN N_AMORT_COST - N_UNAMORT_COST
			ELSE - N_UNAMORT_COST + N_ACCRU_COST
			END
		,CASE
			WHEN DO_AMORT = 'Y'
				THEN N_AMORT_COST - N_UNAMORT_COST
			ELSE - N_UNAMORT_COST + N_ACCRU_COST
			END
		,0 AS N_ACCRU_PREV_FEE
		,0 AS N_ACCRU_PREV_COST
		,'Y' AS DO_AMORT
		,CURRENT_TIMESTAMP AS CREATEDDATE
		,'SP_EIR_LAST_ACF' AS CREATEDBY
		FROM IFRS_LBM_ACCT_EIR_ACF
		WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
		AND ID IN (
			SELECT ID
			FROM ' || V_TABLENAME || '
		)';
	EXECUTE (V_STR_QUERY);

	-- STOP EIR ECF

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || ' 
		SET AMORTSTOPDATE = '|| CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
		,AMORTSTOPMSG = ''CLOSED''
		WHERE MASTERID IN (
			SELECT MASTERID
			FROM ' || V_TABLENAME || '
		)
		AND AMORTSTOPDATE IS NULL';
	EXECUTE (V_STR_QUERY);

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE ' || V_TABLENAME1 || ' ';
	EXECUTE (V_STR_QUERY);

	/*  RIDWAN  START ABNORMAL UNAMORTIZED */
	V_STR_QUERY := '';
	
	V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLENAME1 || ' (MASTERID)
		SELECT MASTERID
		FROM ' || V_TABLEINSERT2 || '
		WHERE CASE
			WHEN (
					N_UNAMORT_FEE > 0
					OR N_UNAMORT_COST < 0
					)
				AND COALESCE(FLAG_AL, 'A') = 'A'
				THEN 1
			WHEN (
					N_UNAMORT_FEE < 0
					OR N_UNAMORT_COST > 0
					)
				AND COALESCE(FLAG_AL, 'A') <> 'A'
				THEN 1
			ELSE 0
			END = 1
		AND ACF_CODE = '2'
		AND DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
		';
	EXECUTE (V_STR_QUERY);

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLENAME1 || ' 
		SET N_UNAMORT_FEE = 0
		,N_AMORT_FEE = N_AMORT_FEE + N_UNAMORT_FEE
		,N_ACCRU_FEE = CASE
			WHEN DO_AMORT = 'Y'
				THEN N_AMORT_FEE - N_UNAMORT_FEE
			ELSE - N_UNAMORT_FEE + N_ACCRU_FEE
			END
		,N_ACCRUFULL_FEE = CASE
			WHEN DO_AMORT = 'Y'
				THEN N_AMORT_FEE - N_UNAMORT_FEE
			ELSE - N_UNAMORT_FEE + N_ACCRU_FEE
			END
		,N_UNAMORT_COST = 0
		,N_AMORT_COST = N_AMORT_COST + N_UNAMORT_COST
		,N_ACCRU_COST = CASE
			WHEN DO_AMORT = 'Y'
				THEN N_AMORT_COST - N_UNAMORT_COST
			ELSE - N_UNAMORT_COST + N_ACCRU_COST
			END
		,N_ACCRUFULL_COST = CASE
			WHEN DO_AMORT = 'Y'
				THEN N_AMORT_COST - N_UNAMORT_COST
			ELSE - N_UNAMORT_COST + N_ACCRU_COST
			END
		,N_ACCRU_PREV_FEE = 0
		,N_ACCRU_PREV_COST = 0
		,DO_AMORT = 'Y'
		,CREATEDDATE = CURRENT_TIMESTAMP
		,CREATEDBY = 'SP_EIR_LAST_ACF_ABN'
		WHERE CASE
			WHEN (
					N_UNAMORT_FEE > 0
					OR N_UNAMORT_COST < 0
					)
				AND COALESCE(FLAG_AL, 'A') = 'A'
				THEN 1
			WHEN (
					N_UNAMORT_FEE < 0
					OR N_UNAMORT_COST > 0
					)
				AND COALESCE(FLAG_AL, 'A') <> 'A'
				THEN 1
			ELSE 0
			END = 1
		AND ACF_CODE = '2'
		AND DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''
		';
	EXECUTE (V_STR_QUERY);

	/*  RIDWAN  END ABNORMAL UNAMORTIZED */

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT2 || ' 
		SET AMORTSTOPDATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
		,AMORTSTOPMSG = ''ABN''
		WHERE MASTERID IN (
			SELECT MASTERID
			FROM ' || V_TABLENAME1 || '
		)';
	EXECUTE (V_STR_QUERY);

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT3 || ' 
		SET STATUS = ''' ||  CONVERT(VARCHAR(8), V_CURRDATE, 112) || '''::DATE
		,CREATEDBY = ''EIR_LAST_ACF''
		WHERE STATUS = ''ACT''
		AND MASTERID IN (
			SELECT MASTERID
			FROM ' || V_TABLENAME1 || '
		) ';
	EXECUTE (V_STR_QUERY);

    ---- UPDATE GL_CONSTNAME
    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_AMT_INITIAL_UPDATE', 'UPDATE GL_CONSTNAME');
    CALL SP_IFRS_EXEC_RULE(P_RUNID, V_CURRDATE, P_PRC, 'GL');

    ---- END
    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'END', 'SP_IFRS_LBM_ACCT_EIR_LAST_ACF', '');
    ---------- ====== BODY ======

END;

$$;