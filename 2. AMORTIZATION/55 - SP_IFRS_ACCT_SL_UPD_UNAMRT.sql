---- DROP PROCEDURE SP_IFRS_ACCT_EIR_GS_RANGE;

CREATE OR REPLACE PROCEDURE SP_IFRS_ACCT_EIR_GS_RANGE(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000',
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S',
    IN P_ID1 BIGINT DEFAULT NULL,
    IN P_ID2 BIGINT DEFAULT NULL)
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_CURRDATE DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    
    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF COALESCE(P_ID1, NULL) IS NULL THEN
        P_ID1 := 0;
    END IF;

    IF COALESCE(P_ID2, NULL) IS NULL THEN
        P_ID2 := 0;
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLEINSERT1 := 'IFRS_IMA_AMORT_CURR_' || P_RUNID || '';
        V_TABLEINSERT2 := 'IFRS_MASTER_ACCOUNT_' || P_RUNID || '';
        V_TABLEINSERT3 := 'SP_IFRS_ACCT_SL_UPD_UNAMORT_' || P_RUNID || '';
    ELSE 
        V_TABLEINSERT1 := 'IFRS_IMA_AMORT_CURR';
        V_TABLEINSERT2 := 'IFRS_MASTER_ACCOUNT';
        V_TABLEINSERT3 := 'SP_IFRS_ACCT_SL_UPD_UNAMORT';
    END IF;
    
    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE, PREVDATE INTO V_CURRDATE, V_PREVDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
        V_PREVDATE := V_CURRDATE - INTERVAL '1 DAY';
    END IF;
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT1 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT1 || ' AS SELECT * FROM IFRS_ACCT_EIR_PAYM_GS WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT2 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT2 || ' AS SELECT * FROM IFRS_ACCT_EIR_PAYM_GS_DATE WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT3 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT3 || ' AS SELECT * FROM IFRS_ACCT_EIR_PAYM_GS_DATE WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- ====== PRE SIMULATION TABLE ======

    -------- ====== BODY ======
    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'START', V_TABLEINSERT3, '');

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT1 || '
        SET UNAMORT_FEE_AMT = 0
            ,UNAMORT_COST_AMT = 0
            ,FAIR_VALUE_AMOUNT = NULL
            ,LOAN_START_AMORTIZATION = NULL
            ,LOAN_END_AMORTIZATION = NULL
        WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || '
        SET UNAMORT_FEE_AMT = 0
            ,UNAMORT_COST_AMT = 0
            ,FAIR_VALUE_AMOUNT = NULL
            ,LOAN_START_AMORTIZATION = NULL
            ,LOAN_END_AMORTIZATION = NULL
        WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE';
    EXECUTE (V_STR_QUERY);

    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'INSERT INTO ', V_TABLEINSERT3, '');


    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE ' || 'TMP_B1' || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || 'TMP_B1' || '(MASTERID) 
        SELECT DISTINCT MASTERID 
        FROM ' || 'IFRS_ACCT_SL_ECF' || '
        WHERE AMORTSTOPDATE IS NULL';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE ' || 'TMP_P1' || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || 'TMP_P1' || '(ID) 
        SELECT MAX(ID) AS ID
        FROM ' || 'IFRS_ACCT_SL_ACF' || '
        WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
            AND MASTERID IN (SELECT MASTERID FROM TMP_B1)
        GROUP BY MASTERID';
    EXECUTE (V_STR_QUERY);

    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'INSERT INTO ', V_TABLEINSERT3, '');


    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT1 || '
    SET UNAMORT_FEE_AMT = X.N_UNAMORT_FEE
        ,UNAMORT_COST_AMT = X.N_UNAMORT_COST
        ,FAIR_VALUE_AMOUNT = ' || V_TABLEINSERT1 || '.OUTSTANDING + X.N_UNAMORT_FEE + X.N_UNAMORT_COST
        ,LOAN_START_AMORTIZATION = X.ECFDATE
        ,LOAN_END_AMORTIZATION = X.AMORTENDDATE
        ,AMORT_TYPE = ''SL''
    FROM (
        SELECT B.DOWNLOAD_DATE
            ,B.MASTERID
            ,B.N_UNAMORT_FEE
            ,B.N_UNAMORT_COST
            ,B.ECFDATE
            ,B.ACCTNO
            ,E.AMORTENDDATE
        FROM ' || 'IFRS_ACCT_SL_ACF' || ' B
        JOIN ' || 'TMP_P1' || ' C ON C.ID = B.ID
        LEFT JOIN ' || 'IFRS_ACCT_SL_ECF' || ' E ON E.MASTERID = B.MASTERID 
            AND E.PREV_PMT_DATE = E.PMT_DATE 
            AND E.DOWNLOAD_DATE = B.ECFDATE
    ) AS X
    WHERE ' || V_TABLEINSERT1 || '.MASTERID = X.MASTERID 
        AND ' || V_TABLEINSERT1 || '.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE';
    EXECUTE (V_STR_QUERY);

    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'INSERT INTO ', V_TABLEINSERT3, '');


    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || '
    SET UNAMORT_FEE_AMT = b.UNAMORT_FEE_AMT
        ,UNAMORT_COST_AMT = b.UNAMORT_COST_AMT
        ,FAIR_VALUE_AMOUNT = b.FAIR_VALUE_AMOUNT
        ,LOAN_START_AMORTIZATION = b.LOAN_START_AMORTIZATION
        ,LOAN_END_AMORTIZATION = b.LOAN_END_AMORTIZATION
        ,AMORT_TYPE = b.AMORT_TYPE
    FROM ' || V_TABLEINSERT1 || ' B
    WHERE ' || V_TABLEINSERT2 || '.MASTERID = B.MASTERID 
        AND ' || V_TABLEINSERT2 || '.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
        AND B.AMORT_TYPE = ''SL''';
    EXECUTE (V_STR_QUERY);


    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;


    ---- END
    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'END', V_TABLEINSERT3, '');
        
    RAISE NOTICE 'IFRS_ACCT_EIR_PAYM_GS_DATE | AFFECTED RECORD : %', V_RETURNROWS2;
    ---------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT1;
    V_COLUMNDEST = '-';
    V_SPNAME = 'IFRS_ACCT_EIR_PAYM_GS_DATE';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT1 || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

END;

$$;