---- DROP PROCEDURE SP_IFRS_ACCT_EIR_ECF_ALIGN4;

CREATE OR REPLACE PROCEDURE SP_IFRS_ACCT_EIR_ECF_ALIGN4(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000',
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_CURRDATE DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLEINSERT1 VARCHAR(100);

    ---- VARIABLE PROCESS
    V_ROUND INT;
    V_FUNCROUND INT;
    
    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLEINSERT1 := 'IFRS_ACCT_EIR_ECF_' || P_RUNID || '';
        V_TABLEINSERT2 := 'IFRS_ACCT_EIR_ACFF_' || P_RUNID || '';
        V_TABLEINSERT3 := 'IFRS_MASTER_ACCOUNT_' || P_RUNID || '';
        V_TABLEINSERT4 := 'IFRS_IMA_AMORT_CURR_' || P_RUNID || '';
    ELSE 
        V_TABLEINSERT1 := 'IFRS_ACCT_EIR_ECF';
        V_TABLEINSERT2 := 'IFRS_ACCT_EIR_ACF';
        V_TABLEINSERT3 := 'IFRS_MASTER_ACCOUNT';
        V_TABLEINSERT4 := 'IFRS_IMA_AMORT_CURR';
    END IF;
    
    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE, PREVDATE INTO V_CURRDATE, V_PREVDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
        V_PREVDATE := V_CURRDATE - INTERVAL '1 DAY';
    END IF;
    
    SELECT CAST(VALUE1 AS INT), CAST(VALUE2 AS INT) INTO V_ROUND, V_FUNCROUND
    FROM TBLM_COMMONCODEDETAIL
    WHERE COMMONCODE = 'SCM003';
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT1 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT1 || ' AS SELECT * FROM IFRS_ACCT_EIR_ECF_NOCF WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT2 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT2 || ' AS SELECT * FROM IFRS_ACCT_EIR_ECF_NOCF WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT3 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT3 || ' AS SELECT * FROM IFRS_ACCT_EIR_ECF_NOCF WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT4 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT4 || ' AS SELECT * FROM IFRS_ACCT_EIR_ECF_NOCF WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- ====== PRE SIMULATION TABLE ======

    -------- ====== BODY ======
    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'START', 'SP_IFRS_ACCT_EIR_UPD_UNAMORT', '');

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE ' || 'TMP_B1' || '';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || 'TMP_B1' || ' 
        (
            MASTERID 
        ) SELECT DISTINCT MASTERID
        FROM ' || V_TABLEINSERT1 || ' 
        WHERE AMORTSTOPDATE IS NULL';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE ' || 'TMP_P1' || '';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || 'TMP_P1' || ' 
        (
            ID 
        ) SELECT MAX(ID) ID
        FROM ' || V_TABLEINSERT2 || '
        WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
        AND MASTERID IN (
            SELECT MASTERID
            FROM ' || 'TMP_B1' || '
        )
        GROUP BY MASTERID';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || 'TMP_U1' || ' 
        (
            DOWNLOAD_DATE  
            ,MASTERID  
            ,N_UNAMORT_FEE  
            ,N_UNAMORT_COST  
            ,ECFDATE  
            ,ACCTNO  
            ,ENDAMORTDATE  
        ) SELECT  B.DOWNLOAD_DATE  
            ,B.MASTERID  
            ,B.N_UNAMORT_FEE  
            ,B.N_UNAMORT_COST  
            ,B.ECFDATE  
            ,B.ACCTNO  
            ,E.ENDAMORTDATE
        FROM ' || V_TABLEINSERT2 || ' B
        JOIN TMP_P1 C ON C.ID = B.ID
        LEFT JOIN ' || V_TABLEINSERT1 || ' E ON E.MASTERID = B.MASTERID
        AND E.PREV_PMT_DATE = ''' || CAST(V_PREVDATE AS VARCHAR(10)) || '''::DATE
        AND E.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
        ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT3 || ' 
        SET N_UNAMORT_FEE = B.N_UNAMORT_FEE
            ,N_UNAMORT_COST = B.N_UNAMORT_COST
            ,FAIR_VALUE_AMOUNT = ' || V_TABLEINSERT4||'.OUTSTANDING + X.N_UNAMORT_FEE + X.N_UNAMORT_COST  
            ,LOAN_START_AMORTIZATION = X.ECFDATE  
            ,LOAN_END_AMORTIZATION = X.ENDAMORTDATE  
            ,AMORT_TYPE = 'EIR'
        FROM TMP_U1 B
        WHERE B.MASTERID = ' || V_TABLEINSERT3 || '.MASTERID
        AND B.ACCTNO = ' || V_TABLEINSERT3 || '.ACCOUNT_NUMBER';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT3 || ' 
        SET EIR = B.N_EFT_INT-RATE
        FROM (
            SELECT MASTERID
            , MAX(N_EFF_INT_RATE) N_EFT_INT_RATE
            FROM ' || V_TABLEINSERT2 || '
            WHERE AMORTSTOPDATE IS NULL 
            AND PREV_PMT_DATE = PMT_DATE
            GROUP BY MASTERID
        ) B
        WHERE B.MASTERID = ' || V_TABLEINSERT3 || '.MASTERID
        AND ' || V_TABLEINSERT3 || '.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE';
    EXECUTE (V_STR_QUERY);

    ---- END
    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'END', 'SP_IFRS_ACCT_EIR_UPD_UNAMORT', '');
        
    ---------- ====== BODY ======

END;

$$;