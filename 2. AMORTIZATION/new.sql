USE [IFRS9]
GO
/****** Object:  StoredProcedure [dbo].[SP_IFRS_LBM_ACCT_EIR_ACF_PMTDT]    Script Date: 14/06/2024 06:32:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_IFRS_LBM_ACCT_EIR_ACF_PMTDT]  
AS  
DECLARE @V_CURRDATE DATE  
 ,@V_PREVDATE DATE  
 ,@V_ROUND INT  
 ,@V_FUNCROUND INT  
  
BEGIN  
 SELECT @V_CURRDATE = MAX(CURRDATE)  
  ,@V_PREVDATE = MAX(PREVDATE)  
 FROM IFRS_PRC_DATE_AMORT  
  
 SELECT @V_ROUND = CAST(VALUE1 AS INT)  
  ,@V_FUNCROUND = CAST(VALUE2 AS INT)  
 FROM TBLM_COMMONCODEDETAIL  
 WHERE COMMONCODE = 'SCM003'  
  
 INSERT INTO IFRS_AMORT_LOG (  
  DOWNLOAD_DATE  
  ,DTM  
  ,OPS  
  ,PROCNAME  
  ,REMARK  
  )  
 VALUES (  
  @V_CURRDATE  
  ,CURRENT_TIMESTAMP  
  ,'START'  
  ,'SP_IFRS_LBM_ACCT_EIR_ACF_PMTDATE'  
  ,''  
  )  
  
 -- STOP REV ALREADY DO DELETE  
 --DELETE FROM IFRS_LBM_ACCT_EIR_ACF WHERE DOWNLOAD_DATE=@V_CURRDATE  
 INSERT INTO IFRS_AMORT_LOG (  
  DOWNLOAD_DATE  
  ,DTM  
  ,OPS  
  ,PROCNAME  
  ,REMARK  
  )  
 VALUES (  
  @V_CURRDATE  
  ,CURRENT_TIMESTAMP  
  ,'DEBUG'  
  ,'SP_IFRS_LBM_ACCT_EIR_ACF_PMTDATE'  
  ,'CLEAN UP'  
  )  
  
 -- PREPARE INDEX  
 --EXECUTE IMMEDIATE 'DROP INDEX PSAK_EIR_ECF_IDX1';  
 --EXECUTE IMMEDIATE 'DROP INDEX IFRS_IMA_AMORT_CURR_IDX1';  
 --EXECUTE IMMEDIATE 'CREATE INDEX PSAK_EIR_ECF_IDX1 ON IFRS_LBM_ACCT_EIR_ECF(MASTERID,PREV_PMT_DATE,PMT_DATE,AMORTSTOPDATE)';  
 --EXECUTE IMMEDIATE 'CREATE INDEX IFRS_IMA_AMORT_CURR_IDX1 ON IFRS_LBM_ACCT_EIR_ECF(MASTERID)';  
 -- INSERT ACF  
 INSERT INTO IFRS_LBM_ACCT_EIR_ACF (  
  DOWNLOAD_DATE  
  ,FACNO  
  ,CIFNO  
  ,DATASOURCE  
  ,N_UNAMORT_COST  
  ,N_UNAMORT_FEE  
  ,N_AMORT_COST  
  ,N_AMORT_FEE  
  ,N_ACCRU_COST  
  ,N_ACCRU_FEE  
  ,N_ACCRUFULL_COST  
  ,N_ACCRUFULL_FEE  
  ,ECFDATE  
  ,CREATEDDATE  
  ,CREATEDBY  
  ,MASTERID  
  ,ACCTNO  
  ,DO_AMORT  
  ,BRANCH  
  ,ACF_CODE  
  ,FLAG_AL -- AR : ADDITIONAL ASSET / LIAB FLAG  
  ,N_ACCRU_NOCF -- FROM NO COST FEE ECF  
  ,N_UNAMORT_NOCF  
  ,N_UNAMORT_PREV_NOCF  
  )  
 SELECT @V_CURRDATE  
  ,M.FACILITY_NUMBER  
  ,M.CUSTOMER_NUMBER  
  ,M.DATA_SOURCE  
  ,A.N_COST_UNAMORT_AMT  
  ,A.N_FEE_UNAMORT_AMT  
  ,C.N_COST_UNAMORT_AMT - A.N_COST_UNAMORT_AMT  
  ,C.N_FEE_UNAMORT_AMT - A.N_FEE_UNAMORT_AMT  
  ,A.N_COST_AMORT_AMT - COALESCE(A.SW_ADJ_COST, 0)  
  ,A.N_FEE_AMORT_AMT - COALESCE(A.SW_ADJ_FEE, 0)  
  ,A.N_COST_AMORT_AMT - COALESCE(A.SW_ADJ_COST, 0) AS N_ACCRUFULL_COST  
  ,A.N_FEE_AMORT_AMT - COALESCE(A.SW_ADJ_FEE, 0) AS N_ACCRUFULL_FEE  
  ,A.DOWNLOAD_DATE  
  ,CURRENT_TIMESTAMP  
  ,'SP_ACCT_EIR_ACF_PMTDATE 1'  
  ,M.MASTERID  
  ,M.ACCOUNT_NUMBER  
  ,'Y' DO_AMORT  
  ,M.BRANCH_CODE  
  ,'1' ACFCODE  
  ,M.IAS_CLASS  
  ,A.NOCF_AMORT_AMT  
  ,A.NOCF_UNAMORT_AMT  
  ,A.NOCF_UNAMORT_AMT_PREV  
 FROM IFRS_LBM_ACCT_EIR_ECF A  
 JOIN (  
  SELECT M.DATA_SOURCE  
   ,M.BRANCH_CODE  
   ,M.MASTERID  
   ,M.ACCOUNT_NUMBER  
   ,M.FACILITY_NUMBER  
   ,M.CUSTOMER_NUMBER  
   ,M.IAS_CLASS  
  FROM IFRS_IMA_AMORT_CURR M  
  LEFT JOIN (  
   SELECT DISTINCT DOWNLOAD_DATE  
    ,MASTERID  
   FROM IFRS_ACCT_CLOSED  
   WHERE DOWNLOAD_DATE = @V_CURRDATE  
   ) D ON M.DOWNLOAD_DATE = D.DOWNLOAD_DATE  
   AND M.MASTERID = D.MASTERID  
  WHERE M.DOWNLOAD_DATE = @V_CURRDATE  
   AND D.MASTERID IS NULL  
  ) M ON A.MASTERID = M.MASTERID  
 JOIN IFRS_LBM_ACCT_EIR_ECF C ON C.AMORTSTOPDATE IS NULL  
  AND C.MASTERID = M.MASTERID  
  AND C.PMT_DATE = C.PREV_PMT_DATE  
 WHERE A.PMT_DATE = @V_CURRDATE  
  AND A.PMT_DATE <> A.PREV_PMT_DATE  
  AND A.AMORTSTOPDATE IS NULL  
  /* REMARKS 20180824
  --TEST KALO SWITCH JGN BIKIN AMORT LAGI  
  AND A.MASTERID NOT IN (  
   SELECT MASTERID  
   FROM IFRS_ACCT_SWITCH  
   WHERE DOWNLOAD_DATE = @V_CURRDATE  
   )
   20180824*/  
  
 /* REMARKS.. TUNNING SCRIPT 20160602  
FROM IFRS_IMA_AMORT_CURR  M  
JOIN IFRS_LBM_ACCT_EIR_ECF A ON A.AMORTSTOPDATE IS NULL  
    AND A.MASTERID=M.MASTERID  
    AND A.PMT_DATE=@V_CURRDATE  
    AND A.PMT_DATE<>A.PREV_PMT_DATE  
JOIN IFRS_LBM_ACCT_EIR_ECF C ON C.AMORTSTOPDATE IS NULL  
    AND C.MASTERID=M.MASTERID  
    AND C.PMT_DATE=C.PREV_PMT_DATE  
WHERE  
    --DONT DO IF CLOSED  
    M.MASTERID NOT IN (SELECT MASTERID FROM IFRS_ACCT_CLOSED WHERE DOWNLOAD_DATE=@V_CURRDATE)  
END REMARKS.. TUNNING SCRIPT 20160602*/  
 INSERT INTO IFRS_AMORT_LOG (  
  DOWNLOAD_DATE  
  ,DTM  
  ,OPS  
  ,PROCNAME  
  ,REMARK  
  )  
 VALUES (  
  @V_CURRDATE  
  ,CURRENT_TIMESTAMP  
  ,'DEBUG'  
  ,'SP_IFRS_LBM_ACCT_EIR_ACF_PMTDATE'  
  ,'ACF INSERTED'  
  )  
  
 -- GET EIR_ACF MAX(ID) TO PROCESS  
 TRUNCATE TABLE TMP_P1  
  
 INSERT INTO TMP_P1 (ID)  
 SELECT MAX(ID) AS ID  
 FROM IFRS_LBM_ACCT_EIR_ACF A  
 -- EXCLUDE ACCT REGISTERED @ STOP REV  
 --LEFT JOIN (SELECT DISTINCT MASTERID FROM PSAK_ACCT_EIR_STOP_REV WHERE DOWNLOAD_DATE=@V_CURRDATE) B  
 --ON A.MASTERID = B.MASTERID  
 WHERE DOWNLOAD_DATE = @V_CURRDATE  
 --AND B.MASTERID IS NULL  
 -- EXCLUDE ACCT REGISTERED @ STOP REV  
 --AND MASTERID NOT IN (SELECT MASTERID FROM PSAK_ACCT_EIR_STOP_REV WHERE DOWNLOAD_DATE=@V_CURRDATE)  
 GROUP BY A.MASTERID  
  
 INSERT INTO IFRS_AMORT_LOG (  
  DOWNLOAD_DATE  
  ,DTM  
  ,OPS  
  ,PROCNAME  
  ,REMARK  
  )  
 VALUES (  
  @V_CURRDATE  
  ,CURRENT_TIMESTAMP  
  ,'DEBUG'  
  ,'SP_IFRS_LBM_ACCT_EIR_ACF_PMTDATE'  
  ,'P1'  
  )  
  
 --FEE 1  
 TRUNCATE TABLE TMP_T1  
  
 INSERT INTO TMP_T1 (  
  SUM_AMT  
  ,DOWNLOAD_DATE  
  ,FACNO  
  ,CIFNO  
  ,DATASOURCE  
  ,ACCTNO  
  ,MASTERID  
  )  
 SELECT SUM(A.N_AMOUNT) AS SUM_AMT  
  ,A.DOWNLOAD_DATE  
  ,A.FACNO  
  ,A.CIFNO  
  ,A.DATASOURCE  
  ,A.ACCTNO  
  ,A.MASTERID  
 FROM (  
  SELECT CASE   
    WHEN A.FLAG_REVERSE = 'Y'  
     THEN - 1 * A.AMOUNT  
    ELSE A.AMOUNT  
    END AS N_AMOUNT  
   ,A.ECFDATE DOWNLOAD_DATE  
   ,A.FACNO  
   ,A.CIFNO  
   ,A.DATASOURCE  
   ,A.ACCTNO  
   ,A.MASTERID  
  FROM IFRS_LBM_ACCT_EIR_COST_FEE_ECF A  
  WHERE A.FLAG_CF = 'F' AND A.STATUS = 'ACT'  
  ) A  
 GROUP BY A.DOWNLOAD_DATE  
  ,A.FACNO  
  ,A.CIFNO  
  ,A.DATASOURCE  
  ,A.ACCTNO  
  ,A.MASTERID  
  
 INSERT INTO IFRS_AMORT_LOG (  
  DOWNLOAD_DATE  
  ,DTM  
  ,OPS  
  ,PROCNAME  
  ,REMARK  
  )  
 VALUES (  
  @V_CURRDATE  
  ,CURRENT_TIMESTAMP  
  ,'DEBUG'  
  ,'SP_IFRS_LBM_ACCT_EIR_ACF_PMTDATE'  
  ,'T1 FEE'  
  )  
  
 -- UPDATE SUM_AMT  
 UPDATE DBO.IFRS_LBM_ACCT_EIR_COST_FEE_ECF  
 SET SUM_AMT = B.SUM_AMT  
 FROM TMP_T1 B  
 WHERE B.MASTERID = DBO.IFRS_LBM_ACCT_EIR_COST_FEE_ECF.MASTERID  
  AND B.DOWNLOAD_DATE = DBO.IFRS_LBM_ACCT_EIR_COST_FEE_ECF.ECFDATE  
  AND DBO.IFRS_LBM_ACCT_EIR_COST_FEE_ECF.FLAG_CF = 'F'  
  
 --PREPARE INDEX  
 --EXECUTE IMMEDIATE 'DROP INDEX PSAK_EIR_COST_FEE_ECF_IDX1';  
 --EXECUTE IMMEDIATE 'DROP INDEX PSAK_EIR_ACF_IDX1';  
 --EXECUTE IMMEDIATE 'DROP INDEX TMP_T1_IDX1';  
 --EXECUTE IMMEDIATE 'CREATE INDEX PSAK_EIR_COST_FEE_ECF_IDX1 ON IFRS_LBM_ACCT_EIR_COST_FEE_ECF(MASTERID,ECFDATE,FLAG_CF)';  
 --EXECUTE IMMEDIATE 'CREATE INDEX PSAK_EIR_ACF_IDX1 ON IFRS_LBM_ACCT_EIR_ACF(MASTERID,ECFDATE)';  
 --EXECUTE IMMEDIATE 'CREATE INDEX TMP_T1_IDX1 ON TMP_T1(MASTERID,DOWNLOAD_DATE)';  
 -- FEE 1  
 INSERT INTO IFRS_LBM_ACCT_EIR_COST_FEE_PREV (  
  FACNO  
  ,CIFNO  
  ,DOWNLOAD_DATE  
  ,ECFDATE  
  ,DATASOURCE  
  ,PRDCODE  
  ,TRXCODE  
  ,CCY  
  ,AMOUNT  
  ,STATUS  
  ,CREATEDDATE  
  ,ACCTNO  
  ,MASTERID  
  ,FLAG_CF  
  ,FLAG_REVERSE  
  ,BRCODE  
  ,SRCPROCESS  
  ,CREATEDBY  
  ,METHOD  
  ,SEQ  
  ,AMOUNT_ORG  
  ,ORG_CCY  
  ,ORG_CCY_EXRATE  
  ,PRDTYPE  
  ,CF_ID  
  )  
 SELECT A.FACNO  
  ,A.CIFNO  
  ,A.DOWNLOAD_DATE  
  ,A.ECFDATE  
  ,A.DATASOURCE  
  ,B.PRDCODE  
  ,B.TRXCODE  
  ,B.CCY  
  ,ROUND(CAST(CAST(B.AMOUNT AS FLOAT) / CAST(B.SUM_AMT AS FLOAT) AS NUMERIC(32, 20)) * A.N_UNAMORT_FEE, @V_ROUND, @V_FUNCROUND) AS N_AMOUNT  
  ,B.STATUS  
  ,CURRENT_TIMESTAMP  
  ,A.ACCTNO  
  ,A.MASTERID  
  ,B.FLAG_CF  
  ,B.FLAG_REVERSE  
  ,B.BRCODE  
  ,B.SRCPROCESS  
  ,'EIRACF01'  
  ,'EIR'  
  ,'1'  
  ,B.AMOUNT_ORG  
  ,B.ORG_CCY  
  ,B.ORG_CCY_EXRATE  
  ,B.PRDTYPE  
  ,B.CF_ID  
 FROM IFRS_LBM_ACCT_EIR_ACF A  
 JOIN IFRS_LBM_ACCT_EIR_COST_FEE_ECF B ON B.ECFDATE = A.ECFDATE  
  AND A.MASTERID = B.MASTERID  
  AND B.FLAG_CF = 'F'  
  AND B.STATUS = 'ACT'  
  AND B.METHOD = 'EIR'  
 WHERE A.DOWNLOAD_DATE = @V_CURRDATE  
  AND (  
   (  
    A.N_UNAMORT_FEE < 0  
    AND A.FLAG_AL = 'A'  
    )  
   OR (  
    A.N_UNAMORT_FEE > 0  
    AND A.FLAG_AL = 'L'  
    )  
   )  
  AND A.ID IN (  
   SELECT ID  
   FROM TMP_P1  
   )  
  
 INSERT INTO IFRS_AMORT_LOG (  
  DOWNLOAD_DATE  
  ,DTM  
  ,OPS  
  ,PROCNAME  
  ,REMARK  
  )  
 VALUES (  
  @V_CURRDATE  
  ,CURRENT_TIMESTAMP  
  ,'DEBUG'  
  ,'SP_IFRS_LBM_ACCT_EIR_ACF_PMTDATE'  
  ,'FEE PREV'  
  )  
  
 --COST 1  
 TRUNCATE TABLE TMP_T2  
  
 INSERT INTO TMP_T2 (  
  SUM_AMT  
  ,DOWNLOAD_DATE  
  ,FACNO  
  ,CIFNO  
  ,DATASOURCE  
  ,ACCTNO  
  ,MASTERID  
  )  
 SELECT SUM(A.N_AMOUNT) AS SUM_AMT  
  ,A.DOWNLOAD_DATE  
  ,A.FACNO  
  ,A.CIFNO  
  ,A.DATASOURCE  
  ,A.ACCTNO  
  ,A.MASTERID  
 FROM (  
  SELECT CASE   
    WHEN A.FLAG_REVERSE = 'Y'  
     THEN - 1 * A.AMOUNT  
    ELSE A.AMOUNT  
    END AS N_AMOUNT  
   ,A.ECFDATE DOWNLOAD_DATE  
   ,A.FACNO  
   ,A.CIFNO  
   ,A.DATASOURCE  
   ,A.ACCTNO  
   ,A.MASTERID  
  FROM IFRS_LBM_ACCT_EIR_COST_FEE_ECF A  
  WHERE A.FLAG_CF = 'C' AND A.STATUS = 'ACT'  
  ) A  
 GROUP BY A.DOWNLOAD_DATE  
  ,A.FACNO  
  ,A.CIFNO  
  ,A.DATASOURCE  
  ,A.ACCTNO  
  ,A.MASTERID  
  
 INSERT INTO IFRS_AMORT_LOG (  
  DOWNLOAD_DATE  
  ,DTM  
  ,OPS  
  ,PROCNAME  
  ,REMARK  
  )  
 VALUES (  
  @V_CURRDATE  
  ,CURRENT_TIMESTAMP  
  ,'DEBUG'  
  ,'SP_IFRS_LBM_ACCT_EIR_ACF_PMTDATE'  
  ,'T2'  
  )  
  
 --EXECUTE IMMEDIATE 'DROP INDEX TMP_T2_IDX1';  
 --EXECUTE IMMEDIATE 'CREATE INDEX TMP_T2_IDX1 ON TMP_T2(MASTERID,DOWNLOAD_DATE)';  
 -- UPDATE SUM_AMT  
 UPDATE DBO.IFRS_LBM_ACCT_EIR_COST_FEE_ECF  
 SET SUM_AMT = B.SUM_AMT  
 FROM TMP_T2 B  
 WHERE B.MASTERID = DBO.IFRS_LBM_ACCT_EIR_COST_FEE_ECF.MASTERID  
  AND B.DOWNLOAD_DATE = DBO.IFRS_LBM_ACCT_EIR_COST_FEE_ECF.ECFDATE  
  AND DBO.IFRS_LBM_ACCT_EIR_COST_FEE_ECF.FLAG_CF = 'C'  
  
 INSERT INTO IFRS_LBM_ACCT_EIR_COST_FEE_PREV (  
  FACNO  
  ,CIFNO  
  ,DOWNLOAD_DATE  
  ,ECFDATE  
  ,DATASOURCE  
  ,PRDCODE  
  ,TRXCODE  
  ,CCY  
  ,AMOUNT  
  ,STATUS  
  ,CREATEDDATE  
  ,ACCTNO  
  ,MASTERID  
  ,FLAG_CF  
  ,FLAG_REVERSE  
  ,BRCODE  
  ,SRCPROCESS  
  ,CREATEDBY  
  ,METHOD  
  ,SEQ  
  ,AMOUNT_ORG  
  ,ORG_CCY  
  ,ORG_CCY_EXRATE  
  ,PRDTYPE  
  ,CF_ID  
  )  
 SELECT A.FACNO  
  ,A.CIFNO  
  ,A.DOWNLOAD_DATE  
  ,A.ECFDATE  
  ,A.DATASOURCE  
  ,B.PRDCODE  
  ,B.TRXCODE  
  ,B.CCY  
  ,ROUND(CAST(CAST(B.AMOUNT AS FLOAT) / CAST(B.SUM_AMT AS FLOAT) AS NUMERIC(32, 20)) * A.N_UNAMORT_COST, @V_ROUND, @V_FUNCROUND) AS N_AMOUNT  
  ,B.STATUS  
  ,CURRENT_TIMESTAMP  
  ,A.ACCTNO  
  ,A.MASTERID  
  ,B.FLAG_CF  
  ,B.FLAG_REVERSE  
  ,B.BRCODE  
  ,B.SRCPROCESS  
  ,'EIRACF01'  
  ,'EIR'  
  ,'1'  
  ,B.AMOUNT_ORG  
  ,B.ORG_CCY  
  ,B.ORG_CCY_EXRATE  
  ,B.PRDTYPE  
  ,B.CF_ID  
 FROM IFRS_LBM_ACCT_EIR_ACF A  
 JOIN IFRS_LBM_ACCT_EIR_COST_FEE_ECF B ON B.ECFDATE = A.ECFDATE  
  AND A.MASTERID = B.MASTERID  
  AND B.FLAG_CF = 'C'  
  AND B.STATUS = 'ACT'  
 WHERE A.DOWNLOAD_DATE = @V_CURRDATE  
  AND (  
   (  
    A.N_UNAMORT_COST > 0  
    AND A.FLAG_AL = 'A'  
    )  
   OR (  
    A.N_UNAMORT_COST < 0  
    AND A.FLAG_AL = 'L'  
    )  
   )  
  AND A.ID IN (  
   SELECT ID  
   FROM TMP_P1  
   )  
  
 INSERT INTO IFRS_AMORT_LOG (  
  DOWNLOAD_DATE  
  ,DTM  
  ,OPS  
  ,PROCNAME  
  ,REMARK  
  )  
 VALUES (  
  @V_CURRDATE  
  ,CURRENT_TIMESTAMP  
  ,'DEBUG'  
  ,'SP_IFRS_LBM_ACCT_EIR_ACF_PMTDATE'  
  ,'COST PREV'  
  )  
  
 -- AMORT ACRU --JOURNAL SHOULD DO THE REST  
 UPDATE IFRS_LBM_ACCT_EIR_ACCRU_PREV  
 SET STATUS = CONVERT(VARCHAR(8), @V_CURRDATE, 112)  
 WHERE STATUS = 'ACT'  
  AND MASTERID IN (  
   SELECT DISTINCT MASTERID  
   FROM IFRS_LBM_ACCT_EIR_ACF  
   WHERE DOWNLOAD_DATE = @V_CURRDATE  
    AND DO_AMORT = 'Y'  
   )  
  
 INSERT INTO IFRS_AMORT_LOG (  
  DOWNLOAD_DATE  
  ,DTM  
  ,OPS  
  ,PROCNAME  
  ,REMARK  
  )  
 VALUES (  
  @V_CURRDATE  
  ,CURRENT_TIMESTAMP  
  ,'DEBUG'  
  ,'SP_IFRS_LBM_ACCT_EIR_ACF_PMTDATE'  
  ,'ACRU PRV UPD'  
  )  
  
 -- STOP EIR ECF END TODAY  
 UPDATE IFRS_LBM_ACCT_EIR_ECF  
 SET AMORTSTOPDATE = @V_CURRDATE  
  ,AMORTSTOPMSG = 'END_ACF'  
 WHERE ENDAMORTDATE = @V_CURRDATE  
  AND AMORTSTOPDATE IS NULL  
  AND MASTERID NOT IN (  
   SELECT MASTERID  
   FROM IFRS_ACCT_CLOSED  
   WHERE DOWNLOAD_DATE = @V_CURRDATE  
   )  
  
 INSERT INTO IFRS_AMORT_LOG (  
  DOWNLOAD_DATE  
  ,DTM  
  ,OPS  
  ,PROCNAME  
  ,REMARK  
  )  
 VALUES (  
  @V_CURRDATE  
  ,CURRENT_TIMESTAMP  
  ,'DEBUG'  
  ,'SP_IFRS_LBM_ACCT_EIR_ACF_PMTDATE'  
  ,'STOP ECF'  
  )  
  
 INSERT INTO IFRS_AMORT_LOG (  
  DOWNLOAD_DATE  
  ,DTM  
  ,OPS  
  ,PROCNAME  
  ,REMARK  
  )  
 VALUES (  
  @V_CURRDATE  
  ,CURRENT_TIMESTAMP  
  ,'END'  
  ,'SP_IFRS_LBM_ACCT_EIR_ACF_PMTDATE'  
  ,''  
  )  
END  

GO