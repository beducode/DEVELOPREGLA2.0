CREATE OR REPLACE FUNCTION F_CURVE_FITTING(METHOD INTEGER)
RETURNS TABLE (A NUMERIC, B NUMERIC, R2 NUMERIC)
LANGUAGE PLPGSQL AS $$
DECLARE
    N INT;
    SUM_X NUMERIC := 0;
    SUM_LN_Y NUMERIC := 0;
    SUM_XX NUMERIC := 0;
    SUM_XLNY NUMERIC := 0;
    AVG_LN_Y NUMERIC := 0;
    SS_TOT NUMERIC := 0;
    SS_RES NUMERIC := 0;
    INTERCEPT NUMERIC;
    SLOPE NUMERIC;
    
    X_VAL NUMERIC;
    Y_VAL NUMERIC;
BEGIN
    -- STEP 1: COUNT VALID POINTS
    SELECT COUNT(*) INTO N FROM CF WHERE Y > 0;
    IF N = 0 THEN
        RETURN;
    END IF;

    -- STEP 2: COMPUTE SUMS
    FOR X_VAL, Y_VAL IN SELECT X, Y FROM CF WHERE Y > 0 LOOP
        SUM_X := SUM_X + X_VAL;
        SUM_LN_Y := SUM_LN_Y + LN(Y_VAL);
        SUM_XX := SUM_XX + X_VAL * X_VAL;
        SUM_XLNY := SUM_XLNY + X_VAL * LN(Y_VAL);
    END LOOP;

    -- STEP 3: CALCULATE SLOPE AND INTERCEPT
    SLOPE := (N * SUM_XLNY - SUM_X * SUM_LN_Y) / (N * SUM_XX - SUM_X * SUM_X);
    INTERCEPT := (SUM_LN_Y - SLOPE * SUM_X) / N;

    -- STEP 4: COMPUTE R^2
    AVG_LN_Y := SUM_LN_Y / N;

    SS_TOT := 0;
    SS_RES := 0;

    FOR X_VAL, Y_VAL IN SELECT X, Y FROM CF WHERE Y > 0 LOOP
        SS_TOT := SS_TOT + POWER(LN(Y_VAL) - AVG_LN_Y, 2);
        SS_RES := SS_RES + POWER(LN(Y_VAL) - (INTERCEPT + SLOPE * X_VAL), 2);
    END LOOP;

    -- STEP 5: RETURN OUTPUT
    A := EXP(INTERCEPT);
    B := SLOPE;
    R2 := CASE WHEN SS_TOT = 0 THEN 1 ELSE 1 - SS_RES / SS_TOT END;

    RETURN NEXT;
END;
$$;
