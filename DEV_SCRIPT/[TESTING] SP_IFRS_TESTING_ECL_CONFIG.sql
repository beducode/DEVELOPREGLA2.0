---- DROP PROCEDURE SP_IFRS_TESTING_ECL_CONFIG;

CREATE OR REPLACE PROCEDURE SP_IFRS_TESTING_ECL_CONFIG(
   IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000', 
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S',
    IN P_MODEL_ID BIGINT DEFAULT 0)
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_CURRDATE DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLEINSERT VARCHAR(100);
    V_TABLENAME VARCHAR(100);
    V_TABLEEADCONFIG VARCHAR(100);
    
    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF COALESCE(P_MODEL_ID, NULL) IS NULL THEN
        P_MODEL_ID := 0;
    END IF;
    
    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE, PREVDATE INTO V_CURRDATE, V_PREVDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
        V_PREVDATE := V_CURRDATE - INTERVAL '1 DAY';
    END IF;
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------

    -------- ====== BODY ======
    V_TABLENAME := 'TMP_IFRS_ECL_MODEL_ECL_' || P_RUNID || '';
    V_TABLEEADCONFIG := 'IFRS_EAD_RULES_CONFIG';

    V_RETURNROWS2 := 0;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLENAME || ' ';
    EXECUTE (V_STR_QUERY);


    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLENAME || ' AS
        SELECT DISTINCT      
        A.PKID AS ECL_MODEL_ID,      
        B.EAD_MODEL_ID,      
        B.SEGMENTATION_ID,      
        C.CCF_FLAG,      
        B.CCF_MODEL_ID AS CCF_RULES_ID,      
        D.LGD_MODEL_ID,      
        CASE D.EFF_DATE_OPTION      
        WHEN ''LAST_MONTH'' THEN (DATE_TRUNC(''MONTH'',(DATE_TRUNC(''MONTH'', ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE) + INTERVAL ''1 MONTH - 1 DAY'' - INTERVAL ''1 MONTH'')) + INTERVAL ''1 MONTH - 1 DAY'')::DATE      
        WHEN ''LAST_QUARTER'' THEN (DATE_TRUNC(''MONTH'',(DATE_TRUNC(''QUARTER'', ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE) + INTERVAL ''1 MONTH - 1 DAY'' -  INTERVAL ''3 MONTH'')) + INTERVAL ''1 MONTH - 1 DAY'')::DATE      
        WHEN ''SELECT_DATE'' THEN COALESCE(D.EFF_DATE ,''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE)      
        ELSE ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE       
        END AS LGD_DATE,      
        E.PD_MODEL_ID,      
        E.ME_MODEL_ID AS PD_ME_MODEL_ID,      
        CASE E.EFF_DATE_OPTION      
        WHEN ''LAST_MONTH'' THEN (DATE_TRUNC(''MONTH'',(DATE_TRUNC(''MONTH'', ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE) + INTERVAL ''1 MONTH - 1 DAY'' - INTERVAL ''1 MONTH'')) + INTERVAL ''1 MONTH - 1 DAY'')::DATE      
        WHEN ''LAST_QUARTER'' THEN (DATE_TRUNC(''MONTH'',(DATE_TRUNC(''QUARTER'', ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE) + INTERVAL ''1 MONTH - 1 DAY'' -  INTERVAL ''3 MONTH'')) + INTERVAL ''1 MONTH - 1 DAY'')::DATE      
        WHEN ''SELECT_DATE'' THEN COALESCE(E.EFF_DATE, ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE)      
        ELSE ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE      
        END AS PD_DATE    
    FROM IFRS_ECL_MODEL_HEADER A      
    JOIN IFRS_ECL_MODEL_DETAIL_EAD B ON A.PKID = B.ECL_MODEL_ID      
    JOIN ' || V_TABLEEADCONFIG || ' C ON B.EAD_MODEL_ID = C.PKID      
    JOIN IFRS_ECL_MODEL_DETAIL_LGD D ON A.PKID = D.ECL_MODEL_ID AND B.SEGMENTATION_ID = D.SEGMENTATION_ID      
    JOIN IFRS_ECL_MODEL_DETAIL_PD E ON A.PKID = E.ECL_MODEL_ID AND B.SEGMENTATION_ID = E.SEGMENTATION_ID      
    JOIN IFRS_ECL_MODEL_DETAIL_PF F ON A.PKID = F.ECL_MODEL_ID      
    WHERE A.IS_DELETE = 0     
    AND B.IS_DELETE = 0      
    AND C.IS_DELETE = 0      
    AND C.ACTIVE_FLAG = 1      
    AND ((' || P_MODEL_ID || ' = 0 AND A.ACTIVE_STATUS = ''1'') OR (A.PKID = ' || P_MODEL_ID || '))';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    RAISE NOTICE 'SP_IFRS_TESTING_ECL_CONFIG | AFFECTED RECORD : %', V_RETURNROWS2;
    ---------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLENAME;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_TESTING_ECL_CONFIG';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLENAME || ' ';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

END;

$$;